// 여기선 함수라 메인에선 순서가 가장 아래꺼가 처음에 배운것으로 함

#include <iostream>
#include "test2.h"	
using namespace std;		// 스탠다드. 표준. 줄임말.
// 함수 : 그 행동을 코드로 또 계속 쓰기 귀찮으니
// 클래스 : 내가 원하는 자료형
// => 템플릿

void test(int _val1, int _val) {		// 만약 디폴트 값을 넣는다면 꼭 오른쪽에 와야 함
	cout << _val << endl;
}

void test(int _val) {		// 이름이 같지만 매개변수를 달리해서 다른 함수처럼 사용하는 것

}

// 여러 자료형을 넣을 때 템플릿을 사용하면 함수 오버로딩을 줄일 수 있음
template<typename T>
T add(T _x, T _y) {
	return _x + _y;
}

// 인라인 : 함수와 메크로의 장점을 함친것
// => 메크로처럼 복붙인데 함수처럼 사용이 가능함

// 메크로 장점 : 코드 가독성
// 메크로 단점 : 디버딩 어려움

// 함수 장점 : 코드 알아보기 쉬움, 모듈화 되어있어 반복사용 가능
// 함수 단점 : 메모리를 잡고 재쉬함수가 되면 스택이 아파함(터짐)

// 네임스페이스 : 이름공간, 
namespace TEST {
	void test();		// 이렇게 분리 가능함. 이름공간이 달라서
}

using std::cout;
using std::endl;		// 이렇게 써서 모호함을 없애려고. 여기저기 쓰다가 충돌남...ㅎㅎ
int main() {
	cout << "뿝" << endl; // 위에 선언해주고 이렇게 쓰기 이유도 위와 같음

	//test(10);
	//test(10, 20);
	add(3, 4); // <int>
	add(3.3, 4.4);		// <double>
	test2 t;
	t.sub();		// 이걸하면 복붙처럼 뒤에 와져서 작동을 함
}